// exemplo-simples.js
// Exemplo simplificado da t√©cnica de login an√¥nimo do Salesforce Inspector

/**
 * EXEMPLO SIMPLIFICADO - T√©cnica de Login An√¥nimo
 * 
 * Este arquivo demonstra os conceitos b√°sicos da t√©cnica usada pelo Salesforce Inspector
 * para abrir janelas an√¥nimas j√° logadas.
 */

// ============================================================================
// 1. CAPTURA DO COOKIE DE SESS√ÉO
// ============================================================================

/**
 * Obt√©m o cookie de sess√£o (sid) do Salesforce
 */
async function getSessionCookie(domain) {
    try {
        const cookie = await chrome.cookies.get({
            url: domain,
            name: 'sid'
        });
        
        if (cookie) {
            console.log('‚úÖ Cookie de sess√£o encontrado:', cookie.value.substring(0, 20) + '...');
            return cookie.value;
        } else {
            console.error('‚ùå Cookie de sess√£o n√£o encontrado');
            return null;
        }
    } catch (error) {
        console.error('‚ùå Erro ao obter cookie:', error);
        return null;
    }
}

// ============================================================================
// 2. CONSTRU√á√ÉO DA URL FRONTDOOR
// ============================================================================

/**
 * Constr√≥i a URL de login an√¥nimo usando frontdoor.jsp
 * Esta √© a t√©cnica principal do Salesforce Inspector
 */
function buildIncognitoLoginUrl(loginAsUrl, sessionId, domain) {
    if (!sessionId) {
        console.error('‚ùå Session ID √© obrigat√≥rio');
        return null;
    }
    
    // O retURL para o frontdoor ser√° a pr√≥pria URL de "Login As"
    const finalRetUrl = encodeURIComponent(loginAsUrl);
    const frontdoorUrl = `${domain}/secur/frontdoor.jsp?sid=${sessionId}&retURL=${finalRetUrl}`;
    
    console.log('üîó URL Frontdoor constru√≠da:', frontdoorUrl);
    return frontdoorUrl;
}

// ============================================================================
// 3. ABERTURA DA JANELA AN√îNIMA
// ============================================================================

/**
 * Abre uma janela an√¥nima com login autom√°tico
 */
function openIncognitoWindow(url) {
    chrome.windows.create({
        url: url,
        incognito: true
    });
    console.log('ü™ü Janela an√¥nima aberta');
}

// ============================================================================
// 4. EXEMPLO DE USO COMPLETO
// ============================================================================

/**
 * Exemplo completo de como usar a t√©cnica
 */
async function exemploCompleto() {
    // Configura√ß√µes
    const domain = 'https://meuorg.my.salesforce.com';
    const targetUserId = '005XXXXXXXXXXXXXXX';
    
    // 1. Obt√©m o cookie de sess√£o
    const sessionId = await getSessionCookie(domain);
    if (!sessionId) {
        console.error('‚ùå N√£o foi poss√≠vel obter a sess√£o');
        return;
    }
    
    // 2. Constr√≥i a URL de "Login As"
    const loginAsUrl = `${domain}/servlet/servlet.su?oid=00DXXXXXXXXXXXXXXX&suorgadminid=${targetUserId}&retURL=%2F`;
    
    // 3. Constr√≥i a URL frontdoor para login an√¥nimo
    const incognitoUrl = buildIncognitoLoginUrl(loginAsUrl, sessionId, domain);
    if (!incognitoUrl) {
        console.error('‚ùå N√£o foi poss√≠vel construir a URL an√¥nima');
        return;
    }
    
    // 4. Abre a janela an√¥nima
    openIncognitoWindow(incognitoUrl);
}

// ============================================================================
// 5. LISTENER PARA MENSAGENS DO POPUP
// ============================================================================

/**
 * Listener para receber mensagens do popup
 */
chrome.runtime.onMessage.addListener((request, sender, sendResponse) => {
    if (request.action === "openIncognitoLogin") {
        console.log('üì® Mensagem recebida: abrir login an√¥nimo');
        openIncognitoWindow(request.url);
        return true;
    }
});

// ============================================================================
// 6. FUN√á√ÉO PARA TESTAR A T√âCNICA
// ============================================================================

/**
 * Fun√ß√£o para testar a t√©cnica (chamada pelo popup)
 */
async function testarTecnica() {
    console.log('üß™ Iniciando teste da t√©cnica de login an√¥nimo...');
    
    // Simula uma URL de "Login As"
    const loginAsUrl = 'https://meuorg.my.salesforce.com/servlet/servlet.su?oid=00DXXXXXXXXXXXXXXX&suorgadminid=005XXXXXXXXXXXXXXX&retURL=%2F';
    
    // Obt√©m o dom√≠nio atual
    const [tab] = await chrome.tabs.query({ active: true, currentWindow: true });
    const domain = `https://${new URL(tab.url).hostname}`;
    
    // Obt√©m a sess√£o
    const sessionId = await getSessionCookie(domain);
    if (!sessionId) {
        alert('‚ùå N√£o foi poss√≠vel obter a sess√£o. Certifique-se de estar logado no Salesforce.');
        return;
    }
    
    // Constr√≥i a URL an√¥nima
    const incognitoUrl = buildIncognitoLoginUrl(loginAsUrl, sessionId, domain);
    if (!incognitoUrl) {
        alert('‚ùå N√£o foi poss√≠vel construir a URL an√¥nima.');
        return;
    }
    
    // Abre a janela an√¥nima
    openIncognitoWindow(incognitoUrl);
    console.log('‚úÖ Teste conclu√≠do com sucesso!');
}

// ============================================================================
// 7. EXPLICA√á√ÉO DA T√âCNICA
// ============================================================================

/*
üéØ COMO A T√âCNICA FUNCIONA:

1. CAPTURA DO COOKIE:
   - A extens√£o l√™ o cookie 'sid' da sess√£o atual
   - Este cookie cont√©m a autentica√ß√£o do usu√°rio

2. URL FRONTDOOR:
   - O Salesforce tem um endpoint especial: /secur/frontdoor.jsp
   - Este endpoint aceita um Session ID como par√¢metro
   - Permite autenticar sem fazer login novamente

3. CONSTRU√á√ÉO DA URL:
   - Combina o frontdoor.jsp com o Session ID atual
   - Adiciona a URL de "Login As" como retURL
   - Resultado: URL que autentica e redireciona automaticamente

4. JANELA AN√îNIMA:
   - Abre uma nova janela an√¥nima com a URL frontdoor
   - O Salesforce autentica automaticamente
   - Redireciona para o "Login As"
   - Usu√°rio est√° logado como o usu√°rio alvo

üîë PONTOS IMPORTANTES:

- A t√©cnica funciona porque o frontdoor.jsp aceita Session IDs v√°lidos
- A janela an√¥nima n√£o compartilha cookies com a janela normal
- O Session ID √© passado via URL, n√£o via cookie
- O Salesforce redireciona automaticamente ap√≥s autentica√ß√£o

‚ö†Ô∏è LIMITA√á√ïES:

- Funciona apenas com Session IDs v√°lidos
- Requer permiss√£o de cookies na extens√£o
- Funciona apenas em dom√≠nios autorizados
- Session ID pode expirar

‚úÖ VANTAGENS:

- N√£o requer nova autentica√ß√£o
- Mant√©m a sess√£o original intacta
- Funciona em janelas an√¥nimas
- Compat√≠vel com diferentes dom√≠nios Salesforce
*/

// Exporta as fun√ß√µes para uso em outros arquivos
if (typeof module !== 'undefined' && module.exports) {
    module.exports = {
        getSessionCookie,
        buildIncognitoLoginUrl,
        openIncognitoWindow,
        exemploCompleto,
        testarTecnica
    };
}
