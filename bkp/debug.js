// debug.js - Ferramentas de debug para a extens√£o

/**
 * Fun√ß√£o para testar se a extens√£o est√° funcionando corretamente
 */
async function debugExtension() {
    console.log('üîß Iniciando debug da extens√£o...');
    
    try {
        // 1. Verificar se estamos em uma aba do Salesforce
        const [tab] = await chrome.tabs.query({ active: true, currentWindow: true });
        console.log('üìã Aba atual:', tab.url);
        
        if (!tab.url) {
            console.error('‚ùå N√£o foi poss√≠vel obter a URL da aba atual');
            return;
        }
        
        const url = new URL(tab.url);
        console.log('üåê Dom√≠nio:', url.hostname);
        console.log('üîó Protocolo:', url.protocol);
        
        // 2. Verificar se √© um dom√≠nio do Salesforce
        const isSalesforce = url.hostname.includes('salesforce.com') || 
                            url.hostname.includes('force.com') || 
                            url.hostname.includes('cloudforce.com');
        
        console.log('üè¢ √â dom√≠nio Salesforce?', isSalesforce);
        
        if (!isSalesforce) {
            console.error('‚ùå N√£o √© um dom√≠nio do Salesforce');
            return;
        }
        
        // 3. Testar a fun√ß√£o getSfHost
        console.log('üîç Testando getSfHost...');
        const sfHost = await new Promise((resolve) => {
            chrome.runtime.sendMessage({
                message: "getSfHost",
                url: tab.url
            }, resolve);
        });
        
        console.log('üè¢ Host do Salesforce:', sfHost);
        
        if (!sfHost) {
            console.error('‚ùå getSfHost retornou null');
            return;
        }
        
        // 4. Testar a fun√ß√£o getSession
        console.log('üîë Testando getSession...');
        const session = await new Promise((resolve) => {
            chrome.runtime.sendMessage({
                message: "getSession",
                sfHost: sfHost
            }, resolve);
        });
        
        console.log('üîë Sess√£o:', session);
        
        if (!session) {
            console.error('‚ùå getSession retornou null');
            return;
        }
        
        // 5. Testar a constru√ß√£o da URL an√¥nima
        console.log('üîó Testando constru√ß√£o da URL an√¥nima...');
        const testLoginAsUrl = `https://${sfHost}/servlet/servlet.su?oid=00DXXXXXXXXXXXXXXX&suorgadminid=005XXXXXXXXXXXXXXX&retURL=%2F`;
        const incognitoUrl = buildIncognitoLoginUrl(testLoginAsUrl, session.key, `https://${session.hostname}`);
        
        console.log('üîó URL an√¥nima constru√≠da:', incognitoUrl);
        
        // 6. Resumo do debug
        console.log('‚úÖ Debug conclu√≠do com sucesso!');
        console.log('üìä Resumo:');
        console.log('  - Dom√≠nio Salesforce: ‚úÖ');
        console.log('  - Host detectado: ‚úÖ');
        console.log('  - Sess√£o obtida: ‚úÖ');
        console.log('  - URL an√¥nima: ‚úÖ');
        
    } catch (error) {
        console.error('‚ùå Erro durante o debug:', error);
    }
}

/**
 * Fun√ß√£o para verificar cookies do Salesforce
 */
async function debugCookies() {
    console.log('üç™ Debug de cookies...');
    
    try {
        const [tab] = await chrome.tabs.query({ active: true, currentWindow: true });
        
        // Lista todos os cookies do dom√≠nio atual
        const cookies = await chrome.cookies.getAll({
            url: tab.url
        });
        
        console.log('üç™ Cookies encontrados:', cookies.length);
        
        cookies.forEach(cookie => {
            console.log(`  - ${cookie.name}: ${cookie.value.substring(0, 20)}...`);
        });
        
        // Procura especificamente pelo cookie 'sid'
        const sidCookie = await chrome.cookies.get({
            url: tab.url,
            name: 'sid'
        });
        
        if (sidCookie) {
            console.log('‚úÖ Cookie sid encontrado:', sidCookie.value.substring(0, 20) + '...');
            console.log('üè¢ Dom√≠nio do cookie:', sidCookie.domain);
            console.log('üîí Seguro:', sidCookie.secure);
        } else {
            console.log('‚ùå Cookie sid n√£o encontrado');
        }
        
    } catch (error) {
        console.error('‚ùå Erro ao verificar cookies:', error);
    }
}

/**
 * Fun√ß√£o para testar a abertura de janela an√¥nima
 */
async function testIncognitoWindow() {
    console.log('ü™ü Testando abertura de janela an√¥nima...');
    
    try {
        const testUrl = 'https://www.google.com';
        
        chrome.windows.create({
            url: testUrl,
            incognito: true
        });
        
        console.log('‚úÖ Janela an√¥nima aberta com sucesso');
        
    } catch (error) {
        console.error('‚ùå Erro ao abrir janela an√¥nima:', error);
    }
}

/**
 * Fun√ß√£o para verificar permiss√µes da extens√£o
 */
async function checkPermissions() {
    console.log('üîê Verificando permiss√µes...');
    
    try {
        const permissions = await chrome.permissions.getAll();
        console.log('üìã Permiss√µes ativas:', permissions);
        
        // Verifica permiss√µes espec√≠ficas
        const hasTabs = await chrome.permissions.contains({ permissions: ['tabs'] });
        const hasCookies = await chrome.permissions.contains({ permissions: ['cookies'] });
        const hasScripting = await chrome.permissions.contains({ permissions: ['scripting'] });
        
        console.log('üìã Permiss√µes espec√≠ficas:');
        console.log('  - tabs:', hasTabs);
        console.log('  - cookies:', hasCookies);
        console.log('  - scripting:', hasScripting);
        
    } catch (error) {
        console.error('‚ùå Erro ao verificar permiss√µes:', error);
    }
}

/**
 * Fun√ß√£o principal de debug
 */
async function runAllDebugTests() {
    console.log('üöÄ Iniciando todos os testes de debug...');
    console.log('=====================================');
    
    await checkPermissions();
    console.log('-------------------------------------');
    
    await debugCookies();
    console.log('-------------------------------------');
    
    await debugExtension();
    console.log('-------------------------------------');
    
    await testIncognitoWindow();
    console.log('=====================================');
    console.log('üéâ Todos os testes conclu√≠dos!');
}

// Adiciona as fun√ß√µes ao objeto global para acesso via console
window.debugExtension = debugExtension;
window.debugCookies = debugCookies;
window.testIncognitoWindow = testIncognitoWindow;
window.checkPermissions = checkPermissions;
window.runAllDebugTests = runAllDebugTests;

// Fun√ß√£o auxiliar para construir URL an√¥nima (copiada do popup.js)
function buildIncognitoLoginUrl(loginAsUrl, sessionId, domain) {
    if (!sessionId) {
        console.error('‚ùå Session ID √© obrigat√≥rio');
        return null;
    }
    
    const finalRetUrl = encodeURIComponent(loginAsUrl);
    return `${domain}/secur/frontdoor.jsp?sid=${sessionId}&retURL=${finalRetUrl}`;
}

console.log('üîß Debug tools carregadas! Use:');
console.log('  - runAllDebugTests() para executar todos os testes');
console.log('  - debugExtension() para testar a extens√£o');
console.log('  - debugCookies() para verificar cookies');
console.log('  - testIncognitoWindow() para testar janela an√¥nima');
console.log('  - checkPermissions() para verificar permiss√µes');
